package org.openrefine.wikidata.editing;

import java.util.Map;
import java.util.HashMap;
import java.util.Set;

import java.util.HashSet;

import com.google.refine.model.Project;
import com.google.refine.model.Cell;
import com.google.refine.model.Column;
import com.google.refine.model.Recon;
import com.google.refine.model.ReconCandidate;
import com.google.refine.model.ReconStats;
import com.google.refine.model.Row;

/**
 * This keeps track of the new items that we
 * have created for each internal reconciliation id.
 * 
 * @author antonin
 *
 */
public class NewItemLibrary {
    
    private Map<Long, String> map;
    
    public NewItemLibrary() {
        map = new HashMap<>();
    }
    
    /**
     * Retrieves the Qid allocated to a given new cell
     * @param id: the fake ItemId generated by the cell
     * @return the qid (or null if unallocated yet)
     */
    public String getQid(long id) {
        return map.get(id);
    }
    
    /**
     * Stores a Qid associated to a new cell
     * @param id : the internal reconciliation id of the new cell
     * @param qid : the associated Qid returned by Wikibase
     */
    public void setQid(long id, String qid) {
        map.put(id, qid);
    }
    
    /**
     * Changes the "new" reconciled cells to their allocated
     * qids for later use.
     * 
     * @param reset: set to true to revert the operation (set cells to "new")
     */
    public void updateReconciledCells(Project project, boolean reset) {
        
        Set<Integer> impactedColumns = new HashSet<>();   
  
        /*
         *  Note that there is a slight violation of OpenRefine's model here:
         *  if we reconcile multiple cells to the same new item, and then
         *  perform this operation on a subset of the corresponding rows,
         *  we are going to modify cells that are outside the facet (because
         *  they are reconciled to the same cell). But I think this is the
         *  right thing to do.
         */
        
        for(Row row : project.rows) {
            for(Cell cell : row.cells) {
                if (cell.recon == null) {
                    continue;
                }
                Recon recon = cell.recon;
                if (Recon.Judgment.New.equals(recon.judgment) && !reset &&
                        map.containsKey(recon.id))  {
                    recon.judgment = Recon.Judgment.Matched;
                    recon.match = new ReconCandidate(
                            map.get(recon.id),
                            cell.value.toString(),
                            new String[0],
                            100);
                } else if (Recon.Judgment.Matched.equals(recon.judgment) && reset &&
                        map.containsKey(recon.id))  {
                    recon.judgment = Recon.Judgment.New;
                    recon.match = null;
                }
            }
        }
        // Update reconciliation statistics for impacted columns
        for(Integer colId : impactedColumns) {
            Column column = project.columnModel.getColumnByCellIndex(colId);
            column.setReconStats(ReconStats.create(project, colId));
        }
    }
    
    /**
     * Getter, only meant to be used by Jackson
     * @return the underlying map
     */
    public Map<Long, String> getQidMap() {
        return map;
    }
    
    /**
     * Setter, only meant to be used by Jackson
     */
    public void setQidMap(Map<Long, String> newMap) {
        map = newMap;
    }
}
